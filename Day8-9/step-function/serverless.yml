
service: step-function
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/bookTable
    - Effect: Allow
      Action: dynamodb:*
      Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/userTable
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:us-east-1:${AWS::AccountId}:NotifyCourier
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:us-east-1:${AWS::AccountId}:OrdersQueue
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:us-east-1:${AWS::AccountId}:stateMachine:storeCheckoutFlow

functions:
  checkInventory:
    handler: handler.checkInventory
  calculateTotal:
    handler: handler.calculateTotal
  redeemPoints:
    handler: handler.redeemPoints
  billCustomer:
    handler: handler.billCustomer
  restoreQuantity:
    handler: handler.restoreQuantity    
  restoreRedeemedPoints:
    handler: handler.restoreRedeemPoints
  sqsWorker:
    handler: handler.sqsWorker
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:197480905965:OrdersQueue
          batchSize: 1


stepFunctions:
  stateMachines:
    storeCheckoutFlow:
      name: storeCheckoutFlow
      definition:
        StartAt: checkInventory
        States:
          # What is this state is about
          checkInventory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Catch:
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
            # will be item from dynamo 
            ResultPath: "$.book"
            Next: calculateTotal
          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal,Arn]
            ResultPath: "$.total"
            # if redeem is true run Redeem points and then run Bill Customer
            # if redeem anything else go ahead and just bill customer  
            Next: isRedeemNeeded
          isRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer
          RedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints,Arn]
            # Update total with new total object with points 
            ResultPath: "$.total"              
            Catch:
                # catch all errors
              - ErrorEquals: [States.ALL]
                Next: RedeemPointsError
            Next: BillCustomer  
            BillCustomer:
              Type: Task
              Resource:
                Fn::GetAtt: [billCustomer, Arn]
              ResultPath: "$.billingStatus"
              Retry:
                - ErrorEquals: [States.ALL]
                  MaxAttempts: 0
              Catch:
                - ErrorEquals: [States.ALL]
                  ResultPath: "$.customerBilling"
                  Next: BillingError
              Next: PrepareOrder
          PrepareOrder: #Add to the queue, lambda worker, will allocate the quirier by calling a 3rd party api and reduce the amount from the item
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.us-east-1.amazonaws.com/${AWS::AccountId}/OrdersQueue
              MessageBody:
                Input.$: "$"
                Token.$: "$$.Task.Token" #From the context
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder 
          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:us-east-1:${AWS::AccountId}:NotifyCourier
              Message.$: "$"
            Next: Dispatched
          Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true
          RestoreRedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreRedeemPoints, Arn]
            End: true
          RestoreQuantity:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreQuantity, Arn]
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints
          RefundCustomer:
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity
          BookNotFoundError:
            Type: Pass
            Result: "No such book avaliable"
            End: true
          BookOutOfStockError:
            Type: Pass
            Result: "No such book out of stock"
            End: true            
              # arn of lambda function
          RedeemPointsError:
            Type: Pass
            Result: "Error in redeem points"
            End: true
          BillingError:
            Type: Pass
            Result: "Billing Error"
            ResultPath: "$.billingStatus"
            Next: RestoreRedeemedPoints
          RestoreRedeemedPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreRedeemedPoints,Arn]
            End: true





plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
